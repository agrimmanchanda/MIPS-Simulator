Need to make:
Data memory: vector
Instruction memory: read directly from file
PC: int
Registers: array (making a register file)

Decode:
Check opcode
Split into RIJ:
    switch statement
    R type is 000000
    J type is 00001x
    Ignore 0100xx
    I type is default case

R type:
    Look at function code and Decode LS 6 bits
    Switch statement for all functions
    Call functions
    Execute them

J & I type:
    Based on opcode, call function


==================================================================
Useful links
Has most of the instructions, like 3 are missing:
http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html

Binary files:
https://courses.cs.vt.edu/cs2604/fall02/binio.html

MIPS to binary file converter:
https://github.com/olly-larkin/mips-parser

MIPS to assembly converter:
http://www.kurtm.net/mipsasm/index.cgi

MIPS instruction execution:
http://courses.cs.vt.edu/cs2506/Fall2014/Notes/L07.DesigningTheDatapath.pdf


binary.bin:
addu $t0, $t1, $t2
jr $t5    //$t5 = 0x10000010
addu $t0, $t0, $t2
addu $t2, $t2, $t2
addu $t0, $t0, $t0      //jumps to this
addu $t0, $t0, $t0

addu $t0, $t1, $t2
jr $t5
jr $zero
addu $t0, $t0, $t2
addu $t2, $t2, $t2
addu $t0, $t0, $t0
addu $t0, $t0, $t0

TO DO =================================================================================
1. Change data memory to chars
  Write function to store 32 bit words into 4 consecutive chars in memory
  Check instructions for certain instructions that require word addresses, and will throw an exception otherwise
2. Implement register access instruction (mainly to protect register 0)
3. Exception handler function
4. Implement PUTC and GETC
5. Check special zeros in functions e.g. LUI, MFHI
6. Testbench (dont write test cases for undefined behaviour)

Clarkitecture 1911:

TO DO============================
putc and getc tests
check $0 protection
==============================

cd "C:\Users\tharu\Documents\GitHub\Imperial\Year 2\MIPSdoesBITs\arch2-2018-cw-MIPSdoesBITs"
parser/parser.exe test/test_sources/sub3.txt test/test_binaries/#




testbenchs
lb $t0, 0($s3)
Try to load a byte from i/o area but not 0x300000003
